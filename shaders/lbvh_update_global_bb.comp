
#version 460

#define MAX_ELEMENTS 1024 
//#extension GL_EXT_shader_atomic_float2: enable

struct GlobalBoundingBox {
    float minX;
    float minY;
    float minZ;
    float maxX;
    float maxY;
    float maxZ;
};

struct Particle {
	vec4 color;
	vec3 position;
	vec3 velocity;
	vec3 acceleration;
	vec3 bbmin;
	vec3 bbmax;
	float mass;
	float damping;
	float group_id;
};

vec3 min_vec3(vec3 a, vec3 b) {
    return vec3(min(a.x, b.x), min(a.y, b.y), min(a.z, b.z));
}

vec3 max_vec3(vec3 a, vec3 b) {
    return vec3(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z));
}

layout (local_size_x = 256) in;

layout (push_constant, std430) uniform PushConstants {
    float deltaTime;
	uint g_num_elements;
};

layout (std430, set = 5, binding = 0) readonly buffer particles {
    Particle g_particles[];
};

layout (std430, set = 5, binding = 1) buffer boundingbox {
    GlobalBoundingBox g_BB;
};


void main() {
    uint idx = gl_GlobalInvocationID.x;
	
    if (idx > 5) {
        return;
    }
	
	float val;
	if (idx < 3){ // mins
		val =  10000.0;
	} else {
		val = -10000.0;
	}
		
	
	for (int i = 0; i< g_num_elements; i++)
	{
		vec3 pos = g_particles[i].position;
		
		if (idx == 0){
			val = min(val, pos.x);
		}
		if (idx == 1){
			val = min(val, pos.y);
		}
		if (idx == 2){
			val = min(val, pos.z);
		}
		if (idx == 3){
			val = max(val, pos.x);
		}
		if (idx == 4){
			val = max(val, pos.y);
		}
		if (idx == 5){
			val = max(val, pos.z);
		}
	}
	
	if (idx == 0){
		g_BB.minX = val;
	}
	if (idx == 1){
		g_BB.minY = val;
	}
	if (idx == 2){
		g_BB.minZ = val;
	}
	if (idx == 3){
		g_BB.maxX = val;
	}
	if (idx == 4){
		g_BB.maxY = val;
	}
	if (idx == 5){
		g_BB.maxZ = val;
	}
		
}
