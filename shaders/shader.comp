#version 450

struct Particle {
	vec4 color;
	vec3 position;
	vec3 velocity;
	vec3 acceleration;
	float mass;
	float damping;
};

layout (binding = 0) uniform ParameterUBO {
    float deltaTime;
	float massBig;
	float grav_const;
	vec3 center_massBig;
} ubo;

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
   Particle particlesIn[ ];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
   Particle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() 
{
    uint index = gl_GlobalInvocationID.x;  
	
    Particle particleIn = particlesIn[index];
    
	particlesOut[index].position = particleIn.position + particleIn.velocity * ubo.deltaTime + 0.5f * particleIn.acceleration * ubo.deltaTime * ubo.deltaTime;

	vec3 dir = ubo.center_massBig - particlesOut[index].position;
    float distSquared = dot(dir, dir);
    vec3 dir_normalized = normalize(dir);

    particlesOut[index].acceleration = ubo.grav_const * ubo.massBig / distSquared * dir_normalized;

    particlesOut[index].velocity = particleIn.velocity + 0.5f * (particleIn.acceleration + particlesOut[index].acceleration) * ubo.deltaTime;


    if ((particlesOut[index].position.x <= -13.0) || (particlesOut[index].position.x >= 13.0)) {
        particlesOut[index].velocity.x = -particlesOut[index].velocity.x;
    }
    if ((particlesOut[index].position.y <= -13.0) || (particlesOut[index].position.y >= 13.0)) {
        particlesOut[index].velocity.y = -particlesOut[index].velocity.y;
    }
	if ((particlesOut[index].position.z <= -13.0) || (particlesOut[index].position.z >= 13.0)) {
        particlesOut[index].velocity.z = -particlesOut[index].velocity.z;
    }

}