
#version 460
const float PI = 3.1415926535897932384626433832795;
struct Particle {
	vec4 color;
	vec3 position;
	vec3 velocity;
	vec3 acceleration;
	float mass;
	float damping;
	float group_id;
};

struct Element {
    uint primitiveIdx;
    float aabbMinX;
    float aabbMinY;
    float aabbMinZ;
    float aabbMaxX;
    float aabbMaxY;
    float aabbMaxZ;
	float mass;
};

layout (local_size_x = 256) in;

layout (push_constant, std430) uniform PushConstants {
    float deltaTime;
	uint g_num_elements;
};

layout (std430, set = 5, binding = 0) readonly buffer particles {
    Particle g_particles[];
};

layout (std430, set = 5, binding = 1) writeonly buffer elements {
    Element g_elements[];
};

void main() {
    uint idx = gl_GlobalInvocationID.x;
	
    if (idx >= g_num_elements) {
        return;
    }
	Particle particle = g_particles[idx];
	float r = 0.005;
	vec3 bbOffset = 10.0f*vec3(r,r,r);
	vec3 bbMin = particle.position - bbOffset;
	vec3 bbMax = particle.position + bbOffset;
	float mass = particle.mass;
	g_elements[idx].aabbMinX = bbMin.x;
	g_elements[idx].aabbMinY = bbMin.y;
	g_elements[idx].aabbMinZ = bbMin.z;
	g_elements[idx].aabbMaxX = bbMax.x;
	g_elements[idx].aabbMaxY = bbMax.y;
	g_elements[idx].aabbMaxZ = bbMax.z;
	g_elements[idx].mass = mass;
	

}